# -*- coding: utf-8 -*-
"""anime_predictor_ui.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/13PDHERjSKCp40gqP7BvcqGQN843-Cytz
"""

import joblib
import gradio as gr

# ‚úÖ Load model and encoders
model = joblib.load("/model.pkl")
genre_encoder = joblib.load("/genre_encoder.pkl")
studio_encoder = joblib.load("/studio_encoder.pkl")

genres = sorted(genre_encoder.classes_)
studios = sorted(studio_encoder.classes_)
threshold = 0.459

# ‚úÖ Prediction Logic
def predict_anime_rank(genre, studio, popularity, favorites, members, episodes):
    genre_enc = genre_encoder.transform([genre])[0]
    studio_enc = studio_encoder.transform([studio])[0]
    x_new = [[genre_enc, studio_enc, popularity, favorites, members, episodes]]
    prob = model.predict_proba(x_new)[0][1]
    top_rank = (1 - prob) * 100
    low_rank = prob * 100
    if prob < threshold:
        message = f"<span class='top'>‚úîÔ∏è This anime is in the <strong>Top Ranked</strong> (Rank ‚â§ 3000)!</span>"
    else:
        message = f"<span class='low'>‚ùå This anime may be ranked <strong>below Top 3000</strong>.</span>"
    return f"""{message}<br>
    <span class='percent'>üéØ Chance of Top Rank: <strong>{top_rank:.2f}%</strong></span><br>
    <span class='percent'>üíÄ Chance of Low Rank: <strong>{low_rank:.2f}%</strong></span>"""

# ‚úÖ JavaScript for sound effect (Pixabay public MP3)
sound_js = """
<script>
function playSound() {
  const audio = new Audio("https://cdn.pixabay.com/download/audio/2023/03/08/audio_676b5efb6a.mp3?filename=select-147473.mp3");
  audio.play();
}
</script>
"""

# ‚úÖ Custom CSS
custom_css = """
body {
    background-color: #101e17 !important;
    font-family: 'Segoe UI', sans-serif;
    color: #d5fbe6 !important;
}
@keyframes shimmer {
    0% { opacity: 0.6; text-shadow: 0 0 10px #ff00cc; }
    50% { opacity: 1; text-shadow: 0 0 20px #00ffff; }
    100% { opacity: 0.6; text-shadow: 0 0 10px #00ff88; }
}
.title-glow {
    animation: shimmer 2s infinite alternate;
    background: linear-gradient(to right, #ff00cc, #00ffff, #00ff88);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    text-align: center;
    font-size: 30px;
    font-weight: bold;
}
@keyframes glowPulse {
    0%, 100% { text-shadow: 0 0 6px #0ff, 0 0 12px #0ff, 0 0 18px #00f0ff; }
    50% { text-shadow: 0 0 10px #ff00cc, 0 0 20px #ff00cc, 0 0 30px #ff9900; }
}
.subtitle-glow {
    text-align: center;
    font-size: 18px;
    font-weight: bold;
    color: #00ffff;
    animation: glowPulse 2.5s infinite;
}
.gr-box, .gr-panel {
    background-color: #162c24 !important;
    border: 1px solid #2f4c3b !important;
    border-radius: 16px !important;
    padding: 16px !important;
    box-shadow: 0 4px 10px rgba(46, 139, 87, 0.15) !important;
}
select, .gr-dropdown select {
    background-color: #204030 !important;
    color: #ffffff !important;
    border: 1px solid #45a049 !important;
    border-radius: 10px !important;
    padding: 12px 10px !important;
    font-size: 15px !important;
}
select option {
    background-color: #1a3128 !important;
    color: #d5fbe6 !important;
}
input[type="range"] {
    accent-color: #80ffaa !important;
}
input[type="number"] {
    background: #204030 !important;
    color: #eafff1 !important;
    border: 1px solid #50c88a !important;
    border-radius: 8px !important;
}
button, .gr-button {
    background-color: #00cc88 !important;
    color: #ffffff !important;
    font-weight: bold;
    font-size: 15px;
    border-radius: 12px !important;
}
button:hover, .gr-button:hover {
    background-color: #00aa70 !important;
}
@keyframes fadeInText {
    from { opacity: 0; transform: translateY(10px); }
    to { opacity: 1; transform: translateY(0); }
}
#custom-output-box {
    background-color: #1a3c2b !important;
    border-left: 5px solid #00cc88 !important;
    color: #dfffe5 !important;
    font-weight: 600;
    padding: 14px;
    font-size: 16px;
    border-radius: 12px !important;
    animation: fadeInText 1s ease-in-out;
    line-height: 1.6;
}
.top {
    color: #00ff99;
    font-weight: bold;
}
.low {
    color: #ff4b4b;
    font-weight: bold;
}
.percent {
    color: #ffdd99;
}
.glow-label {
    background: linear-gradient(to right, #00ffcc, #ff00cc, #00ffff, #ff9900);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    text-align: center;
    font-size: 18px;
    font-weight: bold;
    animation: glowPulse 2.5s infinite alternate;
}
"""

# ‚úÖ Build Gradio Interface
with gr.Blocks(css=custom_css) as demo:
    gr.HTML(sound_js)  # Inject the JS sound function

    gr.Markdown("<div class='title-glow'>‚ú® Anime Rank Predictor AI</div>")
    gr.Markdown("<div class='subtitle-glow'>üß† Input your anime details and discover if it belongs to the Top 3000 Legends!</div>")

    with gr.Row():
        with gr.Column():
            gr.Markdown("<div class='glow-label'>üé¨ Choose a Genre</div>")
            genre = gr.Dropdown(choices=genres, label=None, interactive=True)

        with gr.Column():
            gr.Markdown("<div class='glow-label'>üè¢ Choose a Studio</div>")
            studio = gr.Dropdown(choices=studios, label=None, interactive=True)

    popularity = gr.Slider(1, 100000, step=100, label="üî• Popularity")
    favorites = gr.Slider(1, 1000000, step=1000, label="üíñ Favorites")
    members = gr.Slider(1, 2000000, step=1000, label="üë• Members")
    episodes = gr.Slider(1, 2000, step=1, label="üéûÔ∏è Episodes")

    submit = gr.Button("üîÆ Predict Rank", elem_id="predict-btn")
    output = gr.HTML(label="üìä Prediction Result", elem_id="custom-output-box")

    # üéµ Play sound using JS (invisible Gradio callback)
    submit.click(fn=None, inputs=[], outputs=[], js="playSound()")

    # üß† Then make prediction
    submit.click(
        fn=predict_anime_rank,
        inputs=[genre, studio, popularity, favorites, members, episodes],
        outputs=output
    )

    gr.Markdown("<center style='font-size: 14px; color: #999;'>üå∏ Powered by Machine Learning ‚Ä¢ Built for Anime Lovers</center>")

demo.launch(share=True)