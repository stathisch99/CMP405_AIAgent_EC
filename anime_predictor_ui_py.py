# -*- coding: utf-8 -*-
"""anime_predictor_ui.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/13PDHERjSKCp40gqP7BvcqGQN843-Cytz
"""

# ✅ One-Cell Gradio Setup Using Uploaded Encoders
import joblib
import gradio as gr

# ✅ Load trained model and encoders
model = joblib.load("/model.pkl")  # or "/mnt/data/anime_rank_model.pkl" if you prefer that one
genre_encoder = joblib.load("/genre_encoder.pkl")
studio_encoder = joblib.load("/studio_encoder.pkl")

# ✅ Extract dropdown choices from encoders
genres = sorted(genre_encoder.classes_)
studios = sorted(studio_encoder.classes_)

# ✅ Threshold from training
threshold = 0.459

# ✅ Prediction Function
def predict_anime_rank(genre, studio, popularity, favorites, members, episodes):
    genre_enc = genre_encoder.transform([genre])[0]
    studio_enc = studio_encoder.transform([studio])[0]
    x_new = [[genre_enc, studio_enc, popularity, favorites, members, episodes]]
    prob = model.predict_proba(x_new)[0][1]
    result = "✅ This anime is in the Top Ranked (Rank ≤ 3000)!" if prob < threshold else "❌ This anime may be ranked lower (Rank > 3000)."
    return f"{result}\nChance of Top Rank: {(1 - prob):.2%}\nChance of Low Rank: {prob:.2%}"

# ✅ Build Gradio UI
with gr.Blocks(theme=gr.themes.Base(), css=".gr-button {background-color: #FF6600 !important;}") as demo:
    gr.Markdown("## 🎌 Anime Rank Predictor AI")
    gr.Markdown("Will this anime likely be in the Top 3000 ranked?\nSelect details and find out:")

    with gr.Row():
        genre = gr.Dropdown(choices=genres, label="Genre", interactive=True)
        studio = gr.Dropdown(choices=studios, label="Studio", interactive=True)

    popularity = gr.Slider(1, 100000, step=100, label="Popularity")
    favorites = gr.Slider(1, 1000000, step=1000, label="Favorites")
    members = gr.Slider(1, 2000000, step=1000, label="Members")
    episodes = gr.Slider(1, 2000, step=1, label="Episodes")

    submit = gr.Button("Submit")
    output = gr.Textbox(label="Prediction Result", lines=2)

    submit.click(fn=predict_anime_rank,
                 inputs=[genre, studio, popularity, favorites, members, episodes],
                 outputs=output)

demo.launch(share=True)